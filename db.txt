/*func (pr *propertyRepository) UpdateProperty(id int, Property model.Property) error {
	return nil
}
func (pr *propertyRepository) DeleteProperty(id int) error {
	return nil
}

CREATE TABLE Adrs (
    Id SERIAL PRIMARY KEY,
    Country TEXT NOT NULL,
    City TEXT NOT NULL,
    Street TEXT NOT NULL,
    NumOfHome TEXT NOT NULL
);


CREATE TABLE Price (
    Id SERIAL PRIMARY KEY,
    Value FLOAT NOT NULL,
    Currency TEXT NOT NULL
);


CREATE TABLE "User" (
    ID SERIAL PRIMARY KEY,
    Name TEXT NOT NULL,
    Nickname TEXT NOT NULL,
    Email TEXT NOT NULL,
    Password BYTEA NOT NULL
);


CREATE TABLE Property (
    Id SERIAL PRIMARY KEY,
    AddressId INTEGER NOT NULL,
    PriceId INTEGER NOT NULL,
    UserId INTEGER NOT NULL,
    FOREIGN KEY (AddressId) REFERENCES Adrs(Id) ON DELETE CASCADE,
    FOREIGN KEY (PriceId) REFERENCES Price(Id) ON DELETE CASCADE,
    FOREIGN KEY (UserId) REFERENCES "User"(ID) ON DELETE CASCADE
);


BEGIN;


WITH adrs_insert AS (
    INSERT INTO Adrs (Country, City, Street, NumOfHome)
    VALUES ('USA', 'New York', '5th Avenue', '10A')
    RETURNING Id AS AddressId
),


price_insert AS (
    INSERT INTO Price (Value, Currency)
    VALUES (1000000.0, 'USD')
    RETURNING Id AS PriceId
)


INSERT INTO Property (AddressId, PriceId)
SELECT AddressId, PriceId
FROM adrs_insert, price_insert;

COMMIT;


SELECT
    p.Id AS PropertyId,
    a.Country,
    a.City,
    a.Street,
    a.NumOfHome,
    pr.Value,
    pr.Currency
FROM
    Property p
JOIN
    Adrs a ON p.AddressId = a.Id
JOIN
    Price pr ON p.PriceId = pr.Id;





*/